[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "index",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "index.html#running-code",
    "href": "index.html#running-code",
    "title": "index",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introducción",
    "section": "",
    "text": "Veamos cuáles son los recursos que debemos descargar e instalar primero."
  },
  {
    "objectID": "intro.html#quarto",
    "href": "intro.html#quarto",
    "title": "Introducción",
    "section": "Prerrequisitos",
    "text": "Prerrequisitos\n\nR\nComencemos instalando R. Esto se hace desde el enlace CRAN y eligiendo la plataforma a usar, ya sea Windows, Mac o Linux. En estos apuntes usamos Linux.\n\n\nRStudio\nR es poderoso, pero por defecto funciona con la consola o terminal. Esto puede echarnos para atrás la primera vez. Sin duda, uno se acostumbra y la domina, pero por comodidad podemos comenzar utilizando un buen IDE, en este caso RStudio. Podemos descargarlo e instalarlo desde aquí.\n\n\nTidyverse\nPor sí mismos, R y RStudio son bastante útiles. Sin embargo, es necesario ampliar sus funcionalidades mediante paquetes, que vienen siendo una especie de añadidos que contienen funciones nuevas. En nuestro caso, será el paquete Tidyverse el que instalaremos. Esto es posible lograrlo de dos maneras, siendo la más sencilla la de copiar y pegar la siguiente línea de código en la consola de RStudio:\ninstall.packages(\"tidyverse\")\nDespués de pegar dicha línea en la consola, presionamos Enter para ejecutarla. Así, R descargará e instalará el paquete (es obvio que debemos tener acceso a internet). Es normal que se tome su tiempo.\nJusto después de la instalación, no es posible usar los paquetes por defecto. Debemos cargarlos usando library(), con el nombre del paquete dentro de los paréntesis. Por ejemplo:\nlibrary(tidyverse)\nDebe aparecer un mensaje que mencione varios nombres, como ggplot2, purr o tibble. Eso significa que se ha cargado correctamente.\nEs importante que no descuidemos la actualidad de estos paquetes. Podemos actualizarlos después de haber cargado el paquete mediante\ntidyverse_update()\nLo cual buscará versiones más recientes y, de haberlas, nos dará unas líneas de código que nos permitirá obtenerlas.\n\n\nPaquete datos\nEn estos apuntes se utilizan datos recuperados de varios cursos. Uno muy importante es precisamente el libro Ciencia de Datos con R, cuyo conjunto de datos se llama, precisamente datos. Desde R es posible instalarlos con\ninstall.packages(\"datos\")"
  },
  {
    "objectID": "intro.html#ejecutando-código",
    "href": "intro.html#ejecutando-código",
    "title": "Introducción",
    "section": "Ejecutando código",
    "text": "Ejecutando código\nSe recomienda que el código que vayamos mostrando se vaya introduciendo y ejecutando en la consola de RStudio. La ventaja de que estos apuntes sean electrónicos es que podemos mostrar el código tal cual pueda ser copiado y pegado en dicha consola. De hecho, hay hasta un botón que permite copiarlo. Identificaremos el código «copiable» porque estará escrito como a continuación:\n1 + 2 \nLocaliza el botón de copiar y presiónalo. Ahora pégalo en tu consola de RStudio. Debes comprobar que te arroja lo siguiente, exactamente como te lo mostramos:\n\n\n[1] 3\n\n\nCabe mencionar que retomamos algunas convenciones del libro ya citado arriba. Entre ellas, se encuentran:\n\nLos nombres de funciones estarán escritos en fuente para código y con un par de paréntesis vacíos enseguida sum();\nLos nombres de datos, de argumentos o de variables irán con la misma fuente, pero sin paréntesis datos, y por último\nSi un objeto viene de un paquete y debemos especificar ambos, vendrá el nombre del paquete, enseguida doble dos puntos y al final el nombre del objeto, por ejemplo dplyr::mutate."
  },
  {
    "objectID": "view.html",
    "href": "view.html",
    "title": "Visualización de datos",
    "section": "",
    "text": "Aunque parezca lo más práctico comenzar con la organización y transformación de los datos, comenzaremos por el otro lado. Veamos primero cómo crear gráficos coherentes y hasta elegantes.\nUtilizaremos el paquete ggplot, que utiliza un sistema conocido como la gramática de gráficos. Carguemos dicho paquete, además del conjunto de datos a utilizar:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(datos)"
  },
  {
    "objectID": "view.html#nuestro-primer-gráfico",
    "href": "view.html#nuestro-primer-gráfico",
    "title": "Visualización de datos",
    "section": "Nuestro primer gráfico",
    "text": "Nuestro primer gráfico\nCrearemos nuestro primer gráfico con ggplot y probaremos con datos reales que a mayor tamaño de motor de un coche, mayor consumo de gasolina tendrá. Para ello, debemos estar seguros de haber cargado correctamente tanto el Tydiverse como el conjunto datos. Enseguida mostraremos un data frame, lo cual es un conjunto rectangular de datos organizados en columnas (que vienen siendo las variables) y filas (éstas son las observaciones). Este data frame es llamado millas, el cual está contenido en datos (datos::millas).\n\nmillas\n\n# A tibble: 234 × 11\n   fabrica…¹ modelo cilin…²  anio cilin…³ trans…⁴ tracc…⁵ ciudad autop…⁶ combu…⁷\n   <chr>     <chr>    <dbl> <int>   <int> <chr>   <chr>    <int>   <int> <chr>  \n 1 audi      a4         1.8  1999       4 auto(l… d           18      29 p      \n 2 audi      a4         1.8  1999       4 manual… d           21      29 p      \n 3 audi      a4         2    2008       4 manual… d           20      31 p      \n 4 audi      a4         2    2008       4 auto(a… d           21      30 p      \n 5 audi      a4         2.8  1999       6 auto(l… d           16      26 p      \n 6 audi      a4         2.8  1999       6 manual… d           18      26 p      \n 7 audi      a4         3.1  2008       6 auto(a… d           18      27 p      \n 8 audi      a4 qu…     1.8  1999       4 manual… 4           18      26 p      \n 9 audi      a4 qu…     1.8  1999       4 auto(l… 4           16      25 p      \n10 audi      a4 qu…     2    2008       4 manual… 4           20      28 p      \n# … with 224 more rows, 1 more variable: clase <chr>, and abbreviated variable\n#   names ¹​fabricante, ²​cilindrada, ³​cilindros, ⁴​transmision, ⁵​traccion,\n#   ⁶​autopista, ⁷​combustible\n\n\nPodemos observar que nos muestra sólo las primeras 10 filas e incluso menciona lo faltante: 224 filas y una columna adicionales. Es solo la visualización, el conjunto se encuentra completo en la memoria de R, por comodidad y practicidad es mejor mostrarlos así. También es posible notar que los nombres de las variables no aparecen completos, pero se especifican en la parte inferior del resultado arrojado.\nDe todas las columnas / variables mostradas, nos interesan la cilindrada (lo cual se refiere al tamaño del motor en litros) y autopista, que muestra la eficiencia del coche en millas recorridas por galón de combustible.\n\nGráfico de dispersión con ggplot\nPara poder mostrar un gráfico con las variables mencionadas anteriormente, debemos introducir el siguiente código:\n\nggplot(data = millas) +\n  geom_point(mapping = aes(x = cilindrada, y = autopista))\n\n\n\n\nEste gráfico muestra una relación negativa entre el tamaño del motor y la eficiencia del combustible. O lo que es lo mismo, a mayor tamaño de motor, menos eficiente el combustible.\nExpliquemos las líneas que ejecutamos para obtener el gráfico. En primer lugar, usamos la función ggplot. El primer argumento de esta función es el conjunto de datos a graficar. Sin embargo, no resulta atractivo el resultado si lo dejamos solo con ese argumento (mostrará un gráfico vacío). Notemos que en segundo lugar, tenemos un signo “+”. Éste nos indica que estamos agregando una capa a ggplot(), la cual es definida por la función geom_point, que no es otra cosa más que una capa de puntos. Esta capa se corresponde con un diagrama de dispersión.\nEl argumento de geom_point() es mapping, el cual define cómo se asignan las variables a la parte visual. Podemos notar que aparece emparejado con la función aes(), la cual determina cuál variable se corresponde con el eje x y cuál al eje y del plano o gráfico. ggplot buscará las variables dentro del conjunto de datos.\n\n1+1\n\n2"
  }
]