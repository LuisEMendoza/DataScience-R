---
title: "Visualización de datos - DC"
format: html
editor: visual
---

## Introducción {#introducción}

### Primer gráfico con `ggplot` {#primer-gráfico-con-ggplot}

Para tener un primer acercamiento sobre la visualización de datos con R, demos un acercamiento a **ggplot**. Carguemos el paquete con

```{r}
library(ggplot2)
```

y procedamos a explorar un conjunto de datos ya presente en R: `mtcars`. Este conjunto de datos es pequeño y muy ilustrativo. Lo examinaremos con la función `str()`.

```{r}
str(mtcars)
```

Ahora que conocemos un poco de la estructura de `mtcars`, obtengamos de él un gráfico de dispersión utilizando `ggplot()` con `cyl` como la variable *x* y `mpg` como la variable *y*.

```{r}
ggplot(data = mtcars, mapping = aes(x = cyl, y = mpg)) + 
  geom_point()
```

El gráfico resultante no es del todo adecuado, ya que muestra espacios vacíos en el eje *x*, pero como acercamiento es correcto. Si queremos mejorarlo, debemos convertir la variable `cyl` en una variable categórica, ya que es tratada como numérica por **ggplot**. Esto lo conseguimos con el siguiente comando:

```{r}
ggplot(data = mtcars, mapping = aes(x = factor(cyl), y = mpg)) +
  geom_point()
```

Podemos notar que ahora ya solo se muestran valores existentes en el conjunto de datos.

### Gramática de gráficos y sus capas {#gramática-de-gráficos}

Observemos detenidamente la estructura del comando anterior. **ggplot** sigue algo conocido como la *gramática de gráficos*. Ésta consiste de tres elementos básicos: los datos o variables de interés, las escalas en las que mapearemos dichos datos (las *estéticas*) y los elementos visuales usados para nuestros datos (las *geometrías*). De manera opcional, entra una cuarta capa, los *temas*.

Entre las *Estéticas* podemos encontrar los ejes *x* y *y*, el color de contorno o relleno de las formas, el tamaño, las etiquetas, transparencias, el tipo de forma, la anchura o el tipo de línea dibujada.

Para el caso de las *Geometrías* (que en delante llamaremos *geom*) se pueden contar los tipos de gráfico: línea (line), puntos (points), histograma (histogram), caja (boxplot) o barras (bar).

Entremos un poco más en estos tres conceptos: datos, estéticas y geoms. Agreguemos color a nuestro gráfico, utilizando una de las variables de los datos. El argumento `color` debe colocarse dentro de `aes()`.

```{r}
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, color = disp)) +
  geom_point()
```

Enseguida haremos que el tamaño de las formas depende precisamente de la variable ya usada, `disp`.

```{r}
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, size = disp)) +
  geom_point()
```

Sin embargo, hay que tener cuidado con el hecho de que una variable continua no debe ser mapeada con `shape`. Por ende, `shape` no existe en una escala continua.

#### Capa *datos* {#capa-datos}

La gramática de gráficos utiliza el concepto de capas para la construcción de gráficos. La capa más inferior es la que se corresponde con los datos.

Para esta sección se trabajará con el ya clásico conjunto de datos llamado `iris`, que recoge información de tres especies de lirios: *setosa*, *versicolor* y *virginica*. Fueron tomadas cuatro mediciones de cada planta: tanto la longitud y anchura de pétalos como las de los sépalos. Los pétalos se identifican usualmente como la parte colorida de las flores, mientras que los sépalos son las hojas externas de color verde de las mismas flores, aunque cabe mencionar que en el caso de los lirios, los sépalos son coloridos también. El conjunto de datos `iris` contiene cinco variables: el nombre de especie y las cuatro mediciones mencionadas antes.

#### Capa *estética* {#capa-estética}

Esta capa nos indica cuál es la escala y la manera en la que mapearemos nuestros datos, es decir, definiremos el tipo de gráfico y sus ejes, por lo que de manera indirecta también quedará determinado el rango de visión de nuestros datos.

Continuando con el ejemplo del conjunto `iris`, crearemos un gráfico de dispersión cuyos ejes *x* y *y* serán asociados con la longitud y la anchura de los sépalos, respectivamente.

#### Capa *geometría* {#capa-geometría}

Este último elemento nos permite elegir cómo se verá el gráfico. Resulta algo contradictorio que la capa *estética* se encargue de lo geométrico y la capa *geometría* de lo visual. Pero así trabaja `ggplot`.

Con la información provista por las tres capas, es posible crear ya un gráfico simple, quizá algo rústico, pero funcional.

#### Capa *tema* {#capa-tema}

Si deseamos darle mayor claridad o facilidad de interpretación a nuestro gráfico, echaremos mano de una capa opcional: *tema*.

### Agregando geometrías

Trabajemos con el set de datos conocido como `diamonds`, que incluye información sobre diamantes. Exploremos su contenido

```{r}
str(diamonds)
```

Podemos notar que cuenta con varias variables, de las cuales nos interesan `carat` (una medida del tamaño de los diamantes) y `price` (se corresponde con el precio).

Vamos a crear un gráfico de dispersión que relacione estas variables. Queremos dejar el precio como la variable dependiente, así que ejecutemos los siguientes comandos:

```{r}
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
  geom_point()
```

Ahora queremos agregar una línea de tendencia suavizada a nuestro gráfico. Simplemente añadimos una capa de geometría más utilizando la misma lógica, con `geom_smooth()`:

```{r}
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
  geom_point() +
  geom_smooth()
```

### Mapeos globales y locales

Es posible modificar los mapeos de manera general o que afecten a geometrías específicas. Si deseamos hacerlo globalmente, la modificación la realizaremos en la línea correspondiente a `ggplot`. En caso contrario modificamos la línea correspondiente a la geometría en sí. Cambiemos el color de ambas geometrías utilizando la variable incluida en el set de datos llamada `clarity` asignada al argumento `color` de ggplot:

```{r}
ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = clarity)) +
  geom_point() +
  geom_smooth()
```

La geometría `geom_point()` cuenta con un argumento llamado `alpha` que controla la opacidad de los puntos mostrados, cuyos valores van de 0 a 1. Un valor de 1 implica toyal opacidad y uno de 0 la transparencia máxima: invisibilidad. Dibujemos los puntos un 40% más transparentes para facilitar su lectura, modificando el mapeo únicamente para la geometría de dispersión.

```{r}
ggplot(data = diamonds, mapping = aes(x = carat, y = price, color = clarity)) +
  geom_point(aes(alpha = 0.4)) +
  geom_smooth()
```

### Guardando los gráficos como variables

Es posible almacenar los plots como variables, utilizando la asignación común en R. Sin embargo, es usual que se asigne solo las capas *datos* y *estética*, dejando las *geometrías* para después.

Creemos la variable `plot_price_vs_carat` y asignemos el gráfico a la misma

```{r}
plot_price_vs_carat <- ggplot(data = diamonds, mapping = aes(x = carat, y = price))
```

El comando anterior crea el gráfico pero no lo muestra pues falta la geometría. La agregamos y mostramos con

```{r}
plot_price_vs_carat + geom_point()
```

La utilidad de trabajar con los gráficos almacenados en variables es que nos permite crear y modificar de manera libre, ya que siempre podemos recuperar el original llamando a la variable. Vamos a crear otro gráfico con transparencias al 20%, asignando el original a otra variable y modificando ésta con `aes()`.

```{r}
trans_plot <- plot_price_vs_carat + geom_point(aes(alpha = 0.2))
```

Para visualizar nuestro gráfico basta con llamar la variable:

```{r}
trans_plot
```

También podemos hacer lo mismo con el color y otra variable.

```{r}
byclarity_plot <- plot_price_vs_carat + geom_point(aes(color = clarity))
byclarity_plot
```

## Estéticas visibles

Ya hemos visto que los ejes cartesianos son *estéticas*, al igual que otras características como el color o la transparencia. Hay más. Veamos cuáles son y hagamos unas cuantas aclaraciones.

Tenemos `size`, que se refiere al grosor de los puntos y líneas. Mientras que es importante saber que `color` es para definir el color de líneas y puntos o el contorno de las figuras más complejas. Si deseamos modificar el color de relleno de estas figuras, debemos utilizar `fill`. Si por lo contrario, queremos modificar el tipo de línea, utilizamos la estética `linetype`. Para modificar el texto en los ejes o gráficos usaremos la estética `label` y para finalizar, mencionemos `shape`, que permite cambiar la forma de los puntos.

### `color`, `shape` and `size`

Volvamos a nuestro conjunto de datos llamado `mtcars` para aplicar las estéticas a una de sus variables, la categórica `cyl`. Estas estéticas van incluidas en `aes()` y cabe decir que por convención no es necesario nombrar los argumentos `x` y `y`. Sin embargo, lo seguiremos haciendo por claridad.

No olvidemos que la variable `cyl` es categórica pero la usaremos como factor. Creemos un gráfico de dispersión con `wt` como la variable independiente, `mpg` como la dependiente y `fcyl` como la estética `color`.

```{r}
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point()
```

Agreguemos un par de estéticas más: `shape` y `size` pero en este caso serán aplicadas a la geometría. Les daremos los valores de 1 y 4, respectivamente.

```{r}
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(shape = 1, size = 4)
```

### `color` contra `fill`

Ya se mencionó antes que la estética `color` modifica el contorno de una geometría y `fill` cambia el relleno de la misma. El gráfico de dispersión, al trabajar con puntos, asume que estos no cuentan con relleno, a menos que se modifique la figura de los mismos. Por defecto, la forma `shape` del punto es 19 y esta solo admite cambios en el contorno. Sin embargo, si cambiamos `shape = 21` podremos cambiar el relleno también.

Trabajemos con las variables `cyl` y `am` convertidas a factores y hagamos que la primera se refiera ahora a `fill` y no a `color`, además de modificar la forma a 21 y agreguemos una transparencia de 0.6.

```{r}
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, fill = factor(cyl))) +
  geom_point(shape = 21, size = 4, alpha = 0.6)
```
