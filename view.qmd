---
title: "Visualización de datos"
format: html
editor: visual
---

## Introducción {#quarto}

Aunque parezca lo más práctico comenzar con la organización y transformación de los datos, comenzaremos por el otro lado. Veamos primero cómo crear gráficos coherentes y hasta elegantes.

Utilizaremos el paquete **ggplot**, que utiliza un sistema conocido como la *gramática de gráficos*. Carguemos dicho paquete, además del conjunto de datos a utilizar:

```{r}
library(tidyverse)
library(datos)
```

## Nuestro primer gráfico {#nuestro-primer-gráfico}

Crearemos nuestro primer gráfico con **ggplot** y probaremos con datos reales que a mayor tamaño de motor de un coche, mayor consumo de gasolina tendrá. Para ello, debemos estar seguros de haber cargado correctamente tanto el Tydiverse como el conjunto `datos`. Enseguida mostraremos un *data frame,* lo cual es un conjunto rectangular de datos organizados en columnas (que vienen siendo las variables) y filas (éstas son las observaciones). Este *data frame* es llamado `millas`, el cual está contenido en `datos` (`datos::millas`).

```{r}
millas
```

Podemos observar que nos muestra sólo las primeras 10 filas e incluso menciona lo faltante: 224 filas y una columna adicionales. Es solo la visualización, el conjunto se encuentra completo en la memoria de R, por comodidad y practicidad es mejor mostrarlos así. También es posible notar que los nombres de las variables no aparecen completos, pero se especifican en la parte inferior del resultado arrojado.

De todas las columnas / variables mostradas, nos interesan la `cilindrada` (lo cual se refiere al tamaño del motor en litros) y `autopista`, que muestra la eficiencia del coche en millas recorridas por galón de combustible.

### Gráfico de dispersión con ggplot {#gráfico-de-dispersión-con-ggplot}

Para poder mostrar un gráfico con las variables mencionadas anteriormente, debemos introducir el siguiente código:

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista))
```

Este gráfico muestra una relación negativa entre el tamaño del motor y la eficiencia del combustible. O lo que es lo mismo, a mayor tamaño de motor, menos eficiente el combustible.

Expliquemos las líneas que ejecutamos para obtener el gráfico. En primer lugar, usamos la función `ggplot`. El primer argumento de esta función es el conjunto de datos a graficar. Sin embargo, no resulta atractivo el resultado si lo dejamos solo con ese argumento (mostrará un gráfico vacío). Notemos que en segundo lugar, tenemos un signo "+". Éste nos indica que estamos agregando una capa a `ggplot()`, la cual es definida por la función `geom_point`, que no es otra cosa más que una capa de puntos. Esta capa se corresponde con un diagrama de dispersión.

El argumento de `geom_point()` es `mapping`, el cual define cómo se asignan las variables a la parte visual. Podemos notar que aparece emparejado con la función `aes()`, la cual determina cuál variable se corresponde con el eje *x* y cuál al eje *y* del plano o gráfico. **ggplot** buscará las variables dentro del conjunto de datos.

Practiquemos un poco más. Ahora crearemos un gráfico de dispersión `autopista` contra `cilindros`.

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = autopista, y = cilindros))
```

## Mapeos estéticos {#mapeos-estéticos}

Comencemos a darle mayor personalización a nuestros gráficos. Es probable que deseemos cambiar el color de los puntos de nuestro gráfico de dispersión, basados en algún parámetro. **ggplot** nos permite cambiar la forma, el color y el tamaño de los puntos, basados en algo llamado *parámetro estético*. Para diferenciar del uso de la palabra *valor* en los datos, describiremos los cambios como *niveles* para los estéticos.

Utilicemos como criterio estético la variable `clase`, la cual indica el tipo de vehículo que tenemos en el conjunto de datos. Agreguemos pues esta variable como parte del mapeo (es decir, dentro de la función `aes()`), sin olvidar que el gráfico de dispersión necesita dos valores numéricos para los ejes, por lo que esta tercera variable también forma parte de los detalles estéticos.

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista, color = clase))
```

Así, hemos conseguido asignar un color único a cada valor de la variable `clase`. Es más fácil identificar el tipo de coche que hemos graficado. Notemos que **ggplot** ha agregado una leyenda indicando cuál color corresponde a qué valor.

Si lo que deseamos utilizar para diferenciar los datos es el tamaño, optaremos por utilizar en los estéticos el argumento `size` en lugar de `color`.

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista, size = clase))
```

El propio R nos hará una advertencia relacionada con el hecho de que utilizar una variable nominal como `clase` como criterio estético en cuanto a tamaño no resulta ser una buena idea.

Veamos cómo cambiar la transparencia como parámetro estético:

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista, alpha = clase))
```

Ahora, utilizaremos la variable `clase` para cambiar la forma de los puntos. Cabe mencionar que solo es posible graficar seis formas diferentes a la vez, por lo que si contamos con m\[as niveles, estos no se graficarán.

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista, shape = clase))
```

Si en dado caso deseamos utilizar el color para fines meramente estéticos, es decir, sin que aporten información, podemos colorear el gráfico diciéndole a **ggplot** que cambiaremos el color fuera de la parte estética. Es decir, fuera de `aes()`. Cambiemos el color de los puntos a rojo:

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista), color = "red")
```

R permite cambiar los puntos en cuanto a color (escribiendo entrecomillado el nombre del color en inglés), tamaño (especificando en mm) y la forma (utilizando uno de los 25 números disponibles, por ejemplo el 0 es un cuadrado, el 1 un círculo y el 2 un triángulo).

### Facetas {#facetas}

Podemos separar los gráficos de acuerdo a variables categóricas. Por ejemplo, es posible que deseemos elaborar un gráfico por cada clase de vehículo. Esto implica una separación con base en una sola variable. Lo realizamos de la siguiente manera:

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista)) +
  facet_wrap(~clase, nrow = 2)
```

Notemos que agregamos una capa más a **ggplot** con el signo '+', en dicha capa escribimos `facet_wrap()` y dentro suyo una fórmula con variables categóricas. En nuestro caso, la variable `clase`. El argumento `nrow` se refiere al número de renglones o filas que queremos tener en la representación de los diferentes gráficos.

Si por otro lado, deseamos separar los datos con base en dos variables, utilizaremos `facet_grid()`, la cual admite una fórmula con los nombres de las variables separadas por la virgulilla `~`. Veamos cómo hacerlo con las variables `traccion` y `cilindros`.

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista)) +
  facet_grid(traccion ~ cilindros)
```

## Objetos geométricos {#objetos-geométricos}

En **ggplot** se conoce a los tipos de gráficos como **geom**. Tenemos geom de barra (*bar*), de línea (*line*), de línea suavizada (*smooth*), de caja (*boxplot*), o de dispersión (*point*). Cada geom tendrá sus propias opciones de personalización. **ggplot** cuenta con más de 40 geoms, para referencia sobre ellos podemos acceder a la hoja de referencias disponible en este [pdf](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf).

Veamos algunas de los geoms disponibles.

### Línea suavizada {#línea-suavizada}

Utilicemos la gráfica de línea suavizada o `geom_smooth()` con exactamente los mismos datos que hemos venido utilizando con `geom_point()`.

```{r}
ggplot(data = millas) +
  geom_smooth(mapping = aes(x = cilindrada, y = autopista))
```

Podemos notar que tanto el geom de dispersión como el de línea suavizada son prácticamente lo mismo en cuanto a código, diferenciándose únicamente por el nombre del geom. Sin embargo, hay parámetros estéticos que tienen sentido en uno y no en el otro. Por ejemplo, cabría esperar modificar la forma de los puntos pero no de una línea.

Cambiemos la apariencia de las líneas suavizadas con base en el tipo de transmisión de los vehículos:

```{r}
ggplot(data = millas) +
  geom_smooth(mapping = aes(x = cilindrada, y = autopista, linetype = traccion))
```

Notemos que se realiza la separación en tres tipos: `4` para tracción a 4 ruedas, `d` para tracción delantera y `t` para trasera.

### Uso de varios geoms en el mismo gráfico

Basta con «apilar» las capas en **ggplot** en una línea por separado.

```{r}
ggplot(data = millas) +
  geom_point(mapping = aes(x = cilindrada, y = autopista, color = traccion)) +
  geom_smooth(mapping = aes(x = cilindrada, y = autopista, color = traccion))
```

Cabe mencionar que esta simpleza ocasiona el doble trabajo de capturar mapeos a cada geom. Podemos introducir el concepto de mapeos globales y locales en **ggplot**.

Si escribimos el mapeo dentro de `ggplot()` podemos asignar esos valores por defecto a todos los geoms que apilemos, haciendo necesario un solo cambio si deseamos editar la estética de dichos geoms. Veamos el uso del mapeo global:

```{r}
ggplot(data = millas, mapping = aes(x = cilindrada, y = autopista, color = traccion)) +
  geom_point() +
  geom_smooth()
```

Ahora abordemos el uso de los mapeos locales. Estos permiten ampliar o sobrescribir los mapeos globales solo en la capa donde se colocan. Así es posible mostrar diferentes estéticas en cada geom.

```{r}
ggplot(data = millas, mapping = aes(x = cilindrada, y = autopista)) +
  geom_point(mapping = aes(color = clase)) +
  geom_smooth()
```

En este ejemplo seguiremos teniendo los mismos ejes *x* y *y* en ambos geoms, pero solo aplicamos el cambio del color en `geom_point()`.

Veamos ahora otro ejemplo, pero cambiando el conjunto de datos a mostrar en uno de los geoms. En este caso, grafiquemos solo los coches subcompactos en la línea suavizada utilizando la función `filter()`.

```{r}
ggplot(data = millas, mapping = aes(x = cilindrada, y = autopista)) +
  geom_point(mapping = aes(color = clase)) +
  geom_smooth(data = filter(millas, clase == "subcompacto"), se = FALSE)
```

`filter()` filtra los datos que le indicamos, especificando primero el conjunto de datos original y enseguida el criterio de filtrado.
